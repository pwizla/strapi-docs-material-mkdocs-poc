{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Design APIs fast, manage content easily.</p> <p></p>  <ul> <li> <p> Content Manager</p>  <p></p> <p>Learn how to play with Strapi's Admin Panel and quickly build and add content by reading the User Guide.</p> <p> User Guide</p> </li> <li> <p> Developer</p>  <p></p> <p>Learn how to setup and customize Strapi's core, create plugins, and more by reading the Developer Documentation.</p> <p> Developer Docs</p> </li> <li> <p> API consumer</p>  <p></p> <p>Learn how to consume Strapi's REST APIs by reading our API reference documentation.</p> <p> REST API</p> </li> </ul>  <p> </p>","title":"Welcome to Strapi Documentation"},{"location":"dev-docs/hello/","text":"<p>This documentation contains all technical documentation related to the setup, deployment, update and customization of your Strapi application.</p>  <p>Can't wait to start using Strapi?</p> <p>You can directly head to the Quick Start!  If demos are more your thing, we have a video demo, or you can request a live demo!</p>  <p>The original purpose of the project was to help Bootstrap your API: that's how Strapi was created. Now, Strapi is an open-source headless CMS that gives developers the freedom to choose their favorite tools and frameworks and allows editors to manage and distribute their content using their application's admin panel. Based on a plugin system, Strapi is a flexible CMS whose admin panel and API are extensible - and which every part is customizable to match any use case. Strapi also has a built-in user system to manage in detail what the administrators and end users have access to.</p>","title":"Welcome to the Strapi Developer Docs!"},{"location":"dev-docs/hello/#open-source-contribution","text":"<p>Strapi is an open-source project (see LICENSE file for more information). The core project, as well as the documentation and any related tool can be found in the Strapi GitHub organization.</p> <p>As it goes hand in hand with the open-source ecosystem, Strapi is open to contributions. The Strapi team appreciates every contribution, be it a feature request, bug report, or pull request. The following GitHub repositories are open-source and contributions-friendly:</p> <ul> <li><code>strapi/strapi</code>: main repository of Strapi, which contains the core of the project. You can find the admin panel, core plugins, plugin providers, and the whole code that runs your Strapi application. Please read the <code>CONTRIBUTING.md</code> file to have more information about contributions to the main repository.</li> <li><code>strapi/documentation</code>: contains the whole documentation of Strapi. Please read the contribution guide to have more information about contributions to the Strapi documentation.</li> <li><code>strapi/design-system</code>: is the design system that is used in the admin panel. It brings consistency between the different admin plugins.</li> <li><code>strapi/strapi-docker</code>: contains the code used to generate the official Docker images for Strapi (available through our Docker Hub).</li> <li><code>strapi/awesome-strapi</code>: contains everything the community built and all managed plugins. It is used as a central place to find and submit new packages such as plugins, middlewares, hooks, and general enhancements to the core of Strapi.</li> </ul>","title":"Open-source &amp; Contribution"},{"location":"dev-docs/hello/#strapi-community","text":"<p>Strapi is a community-oriented project with an emphasis on transparency. The Strapi team has at heart to share their vision and build the future of Strapi with the Strapi community. This is why the roadmap is open: as all insights are very important and will help steer the project in the right direction, any community member is most welcome to share ideas and opinions there.</p> <p>Community members also take great part in providing the whole community a plethora of resources about Strapi. You can find tutorials on the Strapi website, where you can also create your own. Also, as an open-source project, the technical documentation of Strapi is open to contributions (see Open-source &amp; Contribution).</p>  <p>Want to join the community?</p> <p>You can join GitHub, the Forum, and the Discord to share your ideas and opinions with other community members and members of the Strapi team. If you're looking for news and updates about Strapi, Twitter and the blog are pretty good places to start!</p>","title":"Strapi Community"},{"location":"dev-docs/hello/#support","text":"<p>Strapi is offered as free and open-source for users who wish to self-host the software. When having an issue or a question, the forum is great first place to reach out for help. Both the Strapi community and core developers often check this platform and answer posts.</p> <p>For enterprise support, please see our Enterprise Support platform, please note that you will need to have an active enterprise license to place tickets.</p>    <p>Material for MkDocs does not support interactive code blocks. This plugin can add the feature but it's for a Jekyll-based theme, so we would lose all our Material for MkDocs Insiders extra features.</p>","title":"Support"},{"location":"dev-docs/api/admin-panel-api/","text":"<p>A Strapi plugin can interact with both the back end or the front end of the Strapi app. The Admin Panel API is about the front end part, i.e. it allows a plugin to customize Strapi's admin panel.</p> <p>The admin panel is a React application that can embed other React applications. These other React applications are the admin parts of each Strapi plugin.</p> <p>To create a plugin that interacts with the Admin Panel API:</p> <ol> <li>Create an entry file.</li> <li>Within this file, declare and export a plugin interface that uses the available actions.</li> <li> <p>Require this plugin interface in a <code>strapi-admin.js</code> file at the root of the plugin package folder:</p> [plugin-name]/strapi-admin.js<pre><code>'use strict';\n\nmodule.exports = require('./admin/src').default;\n</code></pre> </li> </ol>","title":"Admin Panel API for plugins"},{"location":"dev-docs/api/admin-panel-api/#entry-file","text":"<p>The entry file for the Admin Panel API is <code>[plugin-name]/admin/src/index.js</code>. This file exports the required interface, with the following functions available:</p>    Function type Available functions     Lifecycle functions <code>register</code><code>bootstrap</code>   Async function <code>registerTrads</code>","title":"Entry file"},{"location":"dev-docs/api/admin-panel-api/#lifecycle-functions","text":"","title":"Lifecycle functions"},{"location":"dev-docs/api/admin-panel-api/#register","text":"<p>Type: <code>Function</code></p> <p>This function is called to load the plugin, even before the app is actually bootstrapped. It takes the running Strapi application as an argument (<code>app</code>).</p> <p>Within the register function, a plugin can:</p> <ul> <li>register itself so it's available to the admin panel</li> <li>add a new link to the main navigation (see Menu API)</li> <li>create a new settings section</li> <li>define injection zones</li> <li>add reducers</li> </ul>","title":"<code>register()</code>"},{"location":"dev-docs/api/admin-panel-api/#registerplugin","text":"<p>Type: <code>Function</code></p> <p>Registers the plugin to make it available in the admin panel.</p> <p>This function returns an object with the following parameters:</p>    Parameter Type Description     <code>id</code> String Plugin id   <code>name</code> String Plugin name   <code>injectionZones</code> Object Declaration of available injection zones     <p>Note</p> <p>Some parameters can be imported from the <code>package.json</code> file.</p>  <p>Example:</p> my-plugin/admin/src/index.js<pre><code>// Auto-generated component\nimport PluginIcon from './components/PluginIcon';\nimport pluginId from './pluginId'\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: `/plugins/${pluginId}`,\n      icon: PluginIcon,\n      intlLabel: {\n        id: `${pluginId}.plugin.name`,\n        defaultMessage: 'My plugin',\n      },\n      Component: async () =&gt; {\n        const component = await import(/* webpackChunkName: \"my-plugin\" */ './pages/App');\n\n        return component;\n      },\n      permissions: [], // array of permissions (object), allow a user to access a plugin depending on its permissions\n    });\n    app.registerPlugin({\n      id: pluginId,\n      name,\n    });\n  },\n};\n</code></pre>","title":"<code>registerPlugin()</code>"},{"location":"dev-docs/api/admin-panel-api/#bootstrap","text":"<p>Type: <code>Function</code></p> <p>Exposes the bootstrap function, executed after all the plugins are registered.</p> <p>Within the bootstrap function, a plugin can:</p> <ul> <li>extend another plugin, using <code>getPlugin('plugin-name')</code>,</li> <li>register hooks (see Hooks API)</li> <li>add links to a settings section</li> </ul> <p>Example:</p> <pre><code>module.exports = () =&gt; {\n  return {\n    // ...\n    bootstrap(app) {\n      // execute some bootstrap code\n      app.injectContentManagerComponent('editView', 'right-links', { name: 'my-compo', Component: () =&gt; 'my-compo' })\n    },\n  };\n};\n</code></pre>","title":"<code>bootstrap()</code>"},{"location":"dev-docs/api/admin-panel-api/#async-function","text":"<p>While <code>register()</code> and <code>bootstrap()</code> are lifecycle functions, <code>registerTrads()</code> is an async function.</p>","title":"Async function"},{"location":"dev-docs/api/admin-panel-api/#registertrads","text":"<p>Type: <code>Function</code></p> <p>To reduce the build size, the admin panel is only shipped with 2 locales by default (<code>en</code> and <code>fr</code>). The <code>registerTrads()</code> function is used to register a plugin's translations files and to create separate chunks for the application translations. It does not need to be modified.</p>  Example: Register a plugin's translation files <pre><code>  export default {\n    async registerTrads({ locales }) {\n      const importedTrads = await Promise.all(\n        locales.map(locale =&gt; {\n          return import(\n            /* webpackChunkName: \"[pluginId]-[request]\" */ `./translations/${locale}.json`\n          )\n            .then(({ default: data }) =&gt; {\n              return {\n                data: prefixPluginTranslations(data, pluginId),\n                locale,\n              };\n            })\n            .catch(() =&gt; {\n              return {\n                data: {},\n                locale,\n              };\n            });\n        })\n      );\n\n      return Promise.resolve(importedTrads);\n    },\n  };\n</code></pre>","title":"<code>registerTrads()</code>"},{"location":"dev-docs/api/admin-panel-api/#available-actions","text":"<p>The Admin Panel API allows a plugin to take advantage of several small APIs to perform actions. Use this table as a reference:</p>    Action API to use Function to use Related lifecycle function     Add a new link to the main navigation Menu API <code>addMenuLink()</code> <code>register()</code>   Create a new settings section Settings API <code>createSettingSection()</code> <code>register()</code>   Declare an injection zone Injection Zones API <code>registerPlugin()</code> <code>register()</code>   Add a reducer Reducers API <code>addReducers()</code> <code>register()</code>   Create a hook Hooks API <code>createHook()</code> <code>register()</code>   Add a single link to a settings section Settings API <code>addSettingsLink()</code> <code>bootstrap()</code>   Add multiple links to a settings section Settings API <code>addSettingsLinks()</code> <code>bootstrap()</code>   Inject a Component in an injection zone Injection Zones API <code>injectComponent()</code> <code>bootstrap()</code>   Register a hook Hooks API <code>registerHook()</code> <code>bootstrap()</code>     <p>Replacing the WYSIWYG</p> <p>The WYSIWYG editor can be replaced by taking advantage of the register lifecycle (see new WYSIWYG field in the admin panel guide).</p>   <p>Tip</p> <p>The admin panel supports dotenv variables.</p> <p>All variables defined in a <code>.env</code> file and prefixed by <code>STRAPI_ADMIN_</code> are available while customizing the admin panel through <code>process.env</code>.</p>","title":"Available actions"},{"location":"dev-docs/api/admin-panel-api/#menu-api","text":"<p>The Menu API allows a plugin to add a new link to the main navigation through the <code>addMenuLink()</code> function with the following parameters:</p>    Parameter Type Description     <code>to</code> String Path the link should point to   <code>icon</code> React Component Icon to display in the main navigation   <code>intlLabel</code> Object Label for the link, following the React Int'l convention, with:<ul><li><code>id</code>: id used to insert the localized label</li><li><code>defaultMessage</code>: default label for the link</li></ul>   <code>Component</code> Async function Returns a dynamic import of the plugin entry point   <code>permissions</code> Array of Objects Permissions declared in the <code>permissions.js</code> file of the plugin     <p>Note</p> <p><code>intlLabel.id</code> are ids used in translation files (<code>[plugin-name]/admin/src/translations/[language].json</code>).</p>  <p>Example:</p> my-plugin/admin/src/index.js<pre><code>import PluginIcon from './components/PluginIcon';\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: '/plugins/my-plugin',\n      icon: PluginIcon,\n      intlLabel: {\n        id: 'my-plugin.plugin.name',\n        defaultMessage: 'My plugin',\n      },\n      Component: () =&gt; 'My plugin',\n      permissions: [], // permissions to apply to the link\n    });\n    app.registerPlugin({ ... });\n  },\n  bootstrap() {},\n};\n</code></pre>","title":"Menu API"},{"location":"dev-docs/api/admin-panel-api/#settings-api","text":"<p>The Settings API offers 3 different methods:</p>  <ul> <li><code>createSettingSection()</code>to create a new section</li> <li><code>addSettingsLink()</code>to add a single link to an existing section</li> <li><code>addSettingsLinks()</code>to add multiple links to an existing section</li> </ul>   <p>Note</p> <p>Adding a new section happens in the register lifecycle while adding links happens during the bootstrap lifecycle.</p>  <p>All functions accept links as objects with the following parameters:</p>    Parameter Type Description     <code>id</code> String React id   <code>to</code> String Path the link should point to   <code>intlLabel</code> Object Label for the link, following the React Int'l convention, with:<ul><li><code>id</code>: id used to insert the localized label</li><li><code>defaultMessage</code>: default label for the link</li></ul>   <code>Component</code> Async function Returns a dynamic import of the plugin entry point   <code>permissions</code> Array of Objects Permissions declared in the <code>permissions.js</code> file of the plugin","title":"Settings API"},{"location":"dev-docs/api/admin-panel-api/#createsettingsection","text":"<p>Type: <code>Function</code></p> <p>Create a new settings section.</p> <p>The function takes 2 arguments:</p>    Argument Type Description     first argument Object Section label:<ul><li><code>id</code> (String): section id</li><li><code>intlLabel</code> (Object): localized label for the section, following the React Int'l convention, with:<ul><li><code>id</code>: id used to insert the localized label</li><li><code>defaultMessage</code>: default label for the section</li></ul></li></ul>   second argument Array of Objects Links included in the section     <p>Note</p> <p><code>intlLabel.id</code> are ids used in translation files (<code>[plugin-name]/admin/src/translations/[language].json</code>).</p>  <p>Example:</p> my-plugin/admin/src/index.js<pre><code>const myComponent = async () =&gt; {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  register(app) {\n    app.createSettingSection(\n      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create\n      [\n        // links\n        {\n          intlLabel: { id: String, defaultMessage: String },\n          id: String,\n          to: String,\n          Component: myComponent,\n          permissions: Object[],\n        },\n      ]\n    );\n  },\n};\n</code></pre>","title":"<code>createSettingSection()</code>"},{"location":"dev-docs/api/admin-panel-api/#addsettingslink","text":"<p>Type: <code>Function</code></p> <p>Add a unique link to an existing settings section.</p> <p>Example:</p> my-plugin/admin/src/index.js<pre><code>const myComponent = async () =&gt; {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  bootstrap(app) {\n        // Adding a single link\n        app.addSettingsLink(\n         'global', // id of the section to add the link to\n            {\n                intlLabel: { id: String, defaultMessage: String },\n                id: String,\n                to: String,\n                Component: myComponent,\n                permissions: Object[]\n            }\n    )\n  }\n}\n</code></pre>","title":"<code>addSettingsLink()</code>"},{"location":"dev-docs/api/admin-panel-api/#addsettingslinks","text":"<p>Type: <code>Function</code></p> <p>Add multiple links to an existing settings section.</p> <p>Example:</p> my-plugin/admin/src/index.js<pre><code>const myComponent = async () =&gt; {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  bootstrap(app) {\n    // Adding several links at once\n    app.addSettingsLinks(\n      'global', // id of the section to add the link in\n        [{\n          intlLabel: { id: String, defaultMessage: String },\n          id: String,\n          to: String,\n          Component: myComponent,\n          permissions: Object[]\n        }]\n    )\n  }\n}\n</code></pre>","title":"<code>addSettingsLinks()</code>"},{"location":"dev-docs/api/admin-panel-api/#injection-zones-api","text":"<p>Injection zones refer to areas of a view's layout where a plugin allows another to inject a custom React component (e.g. a UI element like a button).</p> <p>Plugins can use:</p> <ul> <li>Strapi's predefined injection zones for the Content Manager,</li> <li>or custom injection zones, created by a plugin</li> </ul>  <p><code>register()</code> vs. <code>bootstrap()</code></p> <p>Injection zones are defined in the register() lifecycle but components are injected in the bootstrap() lifecycle.</p>","title":"Injection Zones API"},{"location":"dev-docs/api/admin-panel-api/#using-predefined-injection-zones","text":"<p>Strapi admin panel comes with predefined injection zones so components can be added to the UI of the Content Manager:</p>     View Injection zone name &amp; Location     List view <ul><li><code>actions</code>: sits between Filters and the cogs icon</li><li><code>deleteModalAdditionalInfos()</code>: sits at the bottom of the modal displayed when deleting items</li></ul>   Edit view <ul><li><code>informations</code>: sits at the top right of the edit view</li><li><code>right-links</code>: sits between \"Configure the view\" and \"Edit\" buttons</li></ul>","title":"Using predefined injection zones"},{"location":"dev-docs/api/admin-panel-api/#creating-a-custom-injection-zone","text":"<p>To create a custom injection zone, declare it as a <code>&lt;InjectionZone /&gt;</code> React component with an <code>area</code> prop that takes a string with the following naming convention: <code>plugin-name.viewName.injectionZoneName</code>.</p>","title":"Creating a custom injection zone"},{"location":"dev-docs/api/admin-panel-api/#injecting-components","text":"<p>A plugin has 2 different ways of injecting a component:</p> <ul> <li>to inject a component from a plugin into another plugin's injection zones, use the <code>injectComponent()</code> function</li> <li>to specifically inject a component into one of the Content Manager's predefined injection zones, use the <code>injectContentManagerComponent()</code> function instead</li> </ul> <p>Both the <code>injectComponent()</code> and <code>injectContentManagerComponent()</code> methods accept the following arguments:</p>    Argument Type Description     first argument String The view where the component is injected   second argument String The zone where the component is injected   third argument Object An object with the following keys:<ul><li><code>name</code> (string): the name of the component</li><li><code>Component</code> (function or class): the React component to be injected</li></ul>     Example: Inject a component in the informations box of the Edit View of the Content Manager my-plugin/admin/src/index.js<pre><code>  export default {\n    bootstrap(app) {\n      app.injectContentManagerComponent('editView', 'informations', {\n        name: 'my-plugin-my-compo',\n        Component: () =&gt; 'my-compo',\n      });\n    }\n  }\n</code></pre>   Example: Creating a new injection zone and injecting it from a plugin to another one:  my-plugin/admin/src/injectionZones.js (1)<pre><code>    import { InjectionZone } from '@strapi/helper-plugin';\n\n    const HomePage = () =&gt; {\n      return (\n        &lt;main&gt;\n          &lt;h1&gt;This is the homepage&lt;/h1&gt;\n          &lt;InjectionZone area=\"my-plugin.homePage.right\" /&gt;\n        &lt;/main&gt;\n      );\n    };\n</code></pre> my-plugin/admin/src/index.js (2)<pre><code>    export default {\n      register() {\n        app.registerPlugin({\n          // ...\n          injectionZones: {\n            homePage: {\n              right: []\n            }\n          }\n        });\n      },\n    }\n</code></pre> <p>my-other-plugin/admin/src/index.js (3)<pre><code>    export default {\n      register() {\n        // ...\n      },\n      bootstrap(app) {\n        app.getPlugin('my-plugin').injectComponent('homePage', 'right', {\n          name: 'my-other-plugin-component',\n          Component: () =&gt; 'This component is injected',\n        });\n      }\n    };\n</code></pre> </p> <ol> <li>We'll use the injection zone in a view.</li> <li>The injection zone is declared in the <code>register()</code> lifecycle of the plugin.</li> <li>The component is injected from a plugin into another plugin.</li> </ol>","title":"Injecting components"},{"location":"dev-docs/api/admin-panel-api/#accessing-data-with-the-usecmeditviewdatamanager-react-hook","text":"<p>Once an injection zone is defined, the component to be injected in the Content Manager can have access to all the data of the Edit View through the <code>useCMEditViewDataManager</code> React hook.</p>  Example of a basic component using the <code>useCMEditViewDataManager</code> hook <pre><code>import { useCMEditViewDataManager } from '@strapi/helper-plugin';\n\nconst MyCompo = () =&gt; {\n  const {\n    createActionAllowedFields: [], // Array of fields that the user is allowed to edit\n    formErrors: {}, // Object errors\n    readActionAllowedFields: [], // Array of field that the user is allowed to edit\n    slug: 'api::address.address', // Slug of the content-type\n    updateActionAllowedFields: [],\n    allLayoutData: {\n      components: {}, // components layout\n      contentType: {}, // content-type layout\n    },\n    initialData: {},\n    isCreatingEntry: true,\n    isSingleType: true,\n    status: 'resolved',\n    layout: {}, // Current content-type layout\n    hasDraftAndPublish: true,\n    modifiedData: {},\n    onPublish: () =&gt; {},\n    onUnpublish: () =&gt; {},\n    addComponentToDynamicZone: () =&gt; {},\n    addNonRepeatableComponentToField: () =&gt; {},\n    addRelation: () =&gt; {},\n    addRepeatableComponentToField: () =&gt; {},\n    moveComponentDown: () =&gt; {},\n    moveComponentField: () =&gt; {},\n    moveComponentUp: () =&gt; {},\n    moveRelation: () =&gt; {},\n    onChange: () =&gt; {},\n    onRemoveRelation: () =&gt; {},\n    removeComponentFromDynamicZone: () =&gt; {},\n    removeComponentFromField: () =&gt; {},\n    removeRepeatableField: () =&gt; {},\n  } = useCMEditViewDataManager()\n\n  return null\n}\n</code></pre>","title":"Accessing data with the <code>useCMEditViewDataManager</code> React hook"},{"location":"dev-docs/api/admin-panel-api/#reducers-api","text":"<p>Reducers are Redux reducers that can be used to share state between components. Reducers can be useful when:</p> <ul> <li>Large amounts of application state are needed in many places in the application.</li> <li>The application state is updated frequently.</li> <li>The logic to update that state may be complex.</li> </ul> <p>Reducers can be added to a plugin interface with the <code>addReducers()</code> function during the <code>register</code> lifecycle.</p> <p>A reducer is declared as an object with this syntax:</p> <p>Example:</p> my-plugin/admin/src/index.js<pre><code>  import { exampleReducer } from './reducers'\n\n  const reducers = {\n    // Reducer Syntax\n    [`${pluginId}_exampleReducer`]: exampleReducer\n  }\n\n  export default {\n    register(app) {\n      app.addReducers(reducers)\n    },\n    bootstrap() {},\n  };\n</code></pre>","title":"Reducers API"},{"location":"dev-docs/api/admin-panel-api/#hooks-api","text":"<p>The Hooks API allows a plugin to create and register hooks, i.e. places in the application where plugins can add personalized behavior.</p> <p>Hooks should be registered during the bootstrap lifecycle of a plugin.</p> <p>Hooks can then be run in series, in waterfall or in parallel:</p> <ul> <li><code>runHookSeries</code> returns an array corresponding to the result of each function executed, ordered</li> <li><code>runHookParallel</code> returns an array corresponding to the result of the promise resolved by the function executed, ordered</li> <li><code>runHookWaterfall</code> returns a single value corresponding to all the transformations applied by the different functions starting with the initial value <code>args</code>.</li> </ul>  Example: Create a hook in a plugin and use it in another plugin my-plugin/admin/src/index.js<pre><code>// Create a hook in a plugin\nexport default {\n  register(app) {\n    app.createHook('My-PLUGIN/MY_HOOK');\n  }\n}\n</code></pre> my-other-plugin/admin/src/index.js<pre><code>// Use the hook in another plugin\nexport default {\n  bootstrap(app) {\n    app.registerHook('My-PLUGIN/MY_HOOK', (...args) =&gt; {\n      console.log(args)\n\n      // important: return the mutated data\n      return args\n    });\n\n    app.registerPlugin({...})\n  }\n}\n</code></pre>","title":"Hooks API"},{"location":"dev-docs/api/admin-panel-api/#predefined-hook","text":"<p>Strapi includes a predefined <code>Admin/CM/pages/ListView/inject-column-in-table</code> hook that can be used to add or mutate a column of the List View of the Content Manager.</p>  Example: <code>Admin/CM/pages/ListView/inject-column-in-table</code> hook, as used by the Internationalization plugin to add the 'Content available in' column ./plugins/my-plugin/admin/src/index.js<pre><code>  import get from 'lodash/get';\n  import cellFormatter from './components/cellFormatter';\n\n  export default {\n    bootstrap(app) {\n      app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', ({ displayedHeaders, layout }) =&gt; {\n        const isFieldLocalized = get(layout, 'contentType.pluginOptions.i18n.localized', false);\n\n        if (!isFieldLocalized) {\n          return { displayedHeaders, layout };\n        }\n\n        return {\n          layout,\n          displayedHeaders: [\n            ...displayedHeaders,\n            {\n              key: '__locale_key__', // Needed for the table\n              fieldSchema: { type: 'string' }, // Schema of the attribute\n              metadatas: {\n                label: 'Content available in', // Label of the header,\n                sortable: true|false // Define if the column is sortable\n              }, // Metadatas for the label\n              // Name of the key in the data we will display\n              name: 'locales',\n              // Custom renderer: props =&gt; Object.keys(props).map(key =&gt; &lt;p key={key}&gt;key&lt;/p&gt;)\n              cellFormatter,\n            },\n          ]\n        };\n      });\n    },\n  }\n</code></pre>","title":"Predefined hook"},{"location":"dev-docs/api/rest-api/","text":"<p></p>","title":"REST API"},{"location":"dev-docs/development/backend-customization/controllers/","text":"<p>Controllers are JavaScript files that contain a set of methods, called actions, reached by the client according to the requested route. Whenever a client requests the route, the action performs the business logic code and sends back the response. Controllers represent the C in the model-view-controller (MVC) pattern.</p> <p>In most cases, the controllers will contain the bulk of a project's business logic. But as a controller's logic becomes more and more complicated, it's a good practice to use services to organize the code into re-usable parts.</p>","title":"Controllers"},{"location":"dev-docs/development/backend-customization/controllers/#implementation","text":"<p>Controllers can be generated or added manually. Strapi provides a <code>createCoreController()</code> factory function that automatically generates core controllers and allows building custom ones or extend or replace the generated controllers.</p>","title":"Implementation"},{"location":"dev-docs/development/backend-customization/controllers/#adding-a-new-controller","text":"<p>A new controller can be implemented:</p> <ul> <li>with the interactive CLI command <code>strapi generate</code></li> <li>or manually by creating a JavaScript file:</li> <li>in <code>./src/api/[api-name]/controllers/</code> for API controllers (this location matters as controllers are auto-loaded by Strapi from there)</li> <li>or in a folder like <code>./src/plugins/[plugin-name]/server/controllers/</code> for plugin controllers, though they can be created elsewhere as long as the plugin interface is properly exported in the <code>strapi-server.js</code> file (see Server API for Plugins documentation)</li> </ul>  JavaScript TypeScript    A nice Material for MkDocs feature is hidden in this block \ud83e\udd2b <p>This tabs showcases the annotation feature of Material for MkDocs. Click on the following little icon (1) to test it.</p> <ol> <li>Hello, I'm an annotation!I could be used to display more information \ud83e\udd13Now, try to find another annotation in the TypeScript tab\u2026 \ud83d\udc40</li> </ol>   ./src/api/restaurant/controllers/restaurant.js<pre><code>const { createCoreController } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =&gt;  ({\n  // Method 1: Creating an entirely custom action\n  async exampleAction(ctx) {\n    try {\n      ctx.body = 'ok';\n    } catch (err) {\n      ctx.body = err;\n    }\n  },\n\n  // Method 2: Wrapping a core action (leaves core logic in place)\n  async find(ctx) {\n    // some custom logic here\n    ctx.query = { ...ctx.query, local: 'en' }\n\n    // Calling the default core action\n    const { data, meta } = await super.find(ctx);\n\n    // some more custom logic\n    meta.date = Date.now()\n\n    return { data, meta };\n  },\n\n  // Method 3: Replacing a core action\n  async findOne(ctx) {\n    const { id } = ctx.params;\n    const { query } = ctx;\n\n    const entity = await strapi.service('api::restaurant.restaurant').findOne(id, query); \n    const sanitizedEntity = await this.sanitizeOutput(entity, ctx); // (1)!\n\n    return this.transformResponse(sanitizedEntity);\n  }\n}));\n</code></pre>  <ol> <li>This line was highlighted just to showcase how code highlighting renders with the default color scheme.</li> </ol>    <p>./src/api/restaurant/controllers/restaurant.ts<pre><code>import { factories } from '@strapi/strapi'; \n\nexport default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =&gt;  ({\n  // Method 1: Creating an entirely custom action\n  async exampleAction(ctx) {\n    try {\n      ctx.body = 'ok';\n    } catch (err) {\n      ctx.body = err;\n    }\n  },\n\n  // Method 2: Wrapping a core action (leaves core logic in place)\n  async find(ctx) {\n    // some custom logic here\n    ctx.query = { ...ctx.query, local: 'en' }\n\n    // Calling the default core action\n    const { data, meta } = await super.find(ctx);\n\n    // some more custom logic\n    meta.date = Date.now()\n\n    return { data, meta };\n  },\n\n  // Method 3: Replacing a core action\n  async findOne(ctx) {\n    const { id } = ctx.params;\n    const { query } = ctx;\n\n    const entity = await strapi.service('api::restaurant.restaurant').findOne(id, query);\n    const sanitizedEntity = await this.sanitizeOutput(entity, ctx); // (1)!\n\n    return this.transformResponse(sanitizedEntity);\n  }\n}));\n</code></pre> </p> <ol> <li> <code>sanitizeOutput</code> and <code>sanitizeInput</code> in Strapi v4 replace the <code>sanitizeEntity</code> utility function found in Strapi v3 (see migration documentation).</li> </ol>    <p>Each controller action can be an <code>async</code> or <code>sync</code> function. Every action receives a context object (<code>ctx</code>) as a parameter. <code>ctx</code> contains the request context and the response context.</p>  Example: <code>GET /hello</code> route calling a basic controller <p>A specific <code>GET /hello</code> route is defined, the name of the router file (i.e. <code>index</code>) is used to call the controller handler (i.e. <code>index</code>). Every time a <code>GET /hello</code> request is sent to the server, Strapi calls the <code>index</code> action in the <code>hello.js</code> controller, which returns <code>Hello World!</code>:</p>  JavaScript TypeScript   ./src/api/hello/routes/hello.js<pre><code>module.exports = {\n    routes: [\n        {\n            method: 'GET',\n            path: '/hello',\n            handler: 'hello.index',\n        }\n    ]\n}\n</code></pre> ./src/api/hello/controllers/hello.js<pre><code>module.exports = {\n    async index(ctx, next) { // called by GET /hello \n        ctx.body = 'Hello World!'; // we could also send a JSON\n    },\n};\n</code></pre>   ./src/api/hello/routes/hello.ts<pre><code>export default {\n    routes: [\n        {\n            method: 'GET',\n            path: '/hello',\n            handler: 'hello.index',\n        }\n    ]\n}\n</code></pre> ./src/api/hello/controllers/hello.ts<pre><code>export default {\n    async index(ctx, next) { // called by GET /hello \n        ctx.body = 'Hello World!'; // we could also send a JSON\n    },\n};\n</code></pre>      <p>Note</p> <p>When a new content-type is created, Strapi builds a generic controller with placeholder code, ready to be customized.</p>","title":"Adding a new controller"},{"location":"dev-docs/development/backend-customization/controllers/#extending-core-controllers","text":"<p> Strapi v4.x.x\u00a0\u00a0\u00b7  Gold plan</p> <p>Default controllers and actions are created for each content-type. These default controllers are used to return responses to API requests (e.g. when <code>GET /api/articles/3</code> is accessed, the <code>findOne</code> action of the default controller for the \"Article\" content-type is called). Default controllers can be customized to implement your own logic. The following code examples should help you get started.</p>  <p>Tip</p> <p>An action from a core controller can be replaced entirely by creating a custom action and naming the action the same as the original action (e.g. <code>find</code>, <code>findOne</code>, <code>create</code>, <code>update</code>, or <code>delete</code>).</p>   Collection type examples <code>find()</code><code>findOne()</code><code>create()</code><code>update()</code><code>delete()</code>   <pre><code>async find(ctx) {\n    // some logic here\n    const { data, meta } = await super.find(ctx);\n    // some more logic\n\n    return { data, meta };\n}\n</code></pre>   <pre><code>async findOne(ctx) {\n    // some logic here\n    const response = await super.findOne(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>   <pre><code>async create(ctx) {\n    // some logic here\n    const response = await super.create(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>   <pre><code>async update(ctx) {\n    // some logic here\n    const response = await super.update(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>   <pre><code>async delete(ctx) {\n    // some logic here\n    const response = await super.delete(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>      Single type examples <code>find()</code><code>update()</code><code>delete()</code>   <pre><code>async find(ctx) {\n    // some logic here\n    const response = await super.find(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>   <pre><code>async update(ctx) {\n    // some logic here\n    const response = await super.update(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>     <pre><code>async delete(ctx) {\n    // some logic here\n    const response = await super.delete(ctx);\n    // some more logic\n\n    return response;\n}\n</code></pre>","title":"Extending core controllers"},{"location":"dev-docs/development/backend-customization/controllers/#usage","text":"<p>Controllers are declared and attached to a route. Controllers are automatically called when the route is called, so controllers usually do not need to be called explicitly. However, services can call controllers, and in this case the following syntax should be used:</p> <pre><code>    // access an API controller\n    strapi.controller('api::api-name.controller-name');\n\n    // access a plugin controller\n    strapi.controller('plugin::plugin-name.controller-name');\n</code></pre>  <p>Tip</p> <p>To list all the available controllers, run <code>yarn strapi controllers:list</code>.</p>","title":"Usage"},{"location":"dev-docs/development/backend-customization/middlewares/","text":"<p>Different types of middlewares</p> <p>In Strapi, 2 middleware concepts coexist:</p> <ul> <li> <p>Strapi middlewares are configured and enabled for the entire Strapi server application. These middlewares can be applied at the application level or at the API level. The present documentation describes how to implement them.Plugins can also add Strapi middlewares (see Server API documentation).</p> </li> <li> <p>Route middlewares have a more limited scope and are configured and used as middlewares at the route level. They are described in the routes documentation.</p> </li> </ul>","title":"Middlewares customization"},{"location":"dev-docs/development/backend-customization/middlewares/#implementation","text":"<p>A new application-level or API-level middleware can be implemented:</p> <ul> <li>with the interactive CLI command <code>strapi generate</code></li> <li>or manually by creating a JavaScript file in the appropriate folder (see project structure):</li> <li><code>./src/middlewares/</code> for application-level middlewares</li> <li><code>./src/api/[api-name]/middlewares/</code> for API-level middlewares</li> <li><code>./src/plugins/[plugin-name]/middlewares/</code> for plugin middlewares</li> </ul> <p>Middlewares working with the REST API are functions like the following:</p>  JavaScript TypeScript   ./src/middlewares/my-middleware.js or ./src/api/[api-name]/middlewares/my-middleware.js<pre><code>module.exports = (config, { strapi })=&gt; {\n    return (context, next) =&gt; {};\n};\n</code></pre>   ./src/middlewares/my-middleware.js or ./src/api/[api-name]/middlewares/my-middleware.ts<pre><code>export default (config, { strapi })=&gt; {\nreturn (context, next) =&gt; {};\n};\n</code></pre>    <p>Once created, custom middlewares should be added to the middlewares configuration file or Strapi won't load them.</p>  Example of a custom timer middleware  JavaScript TypeScript   ./config/middlewares.js<pre><code>module.exports = () =&gt; {\n    return async (ctx, next) =&gt; {\n        const start = Date.now();\n\n        await next();\n\n        const delta = Math.ceil(Date.now() - start);\n        ctx.set('X-Response-Time', delta + 'ms');\n    };\n};\n</code></pre>   ./config/middlewares.ts<pre><code>export default () =&gt; {\n    return async (ctx, next) =&gt; {\n        const start = Date.now();\n\n        await next();\n\n        const delta = Math.ceil(Date.now() - start);\n        ctx.set('X-Response-Time', delta + 'ms');\n    };\n};\n</code></pre>     <p>The GraphQL plugin also allows implementing custom middlewares, with a different syntax.</p>","title":"Implementation"},{"location":"dev-docs/development/backend-customization/middlewares/#usage","text":"<p>Middlewares are called different ways depending on their scope:</p> <ul> <li>use <code>global::middleware-name</code> for application-level middlewares</li> <li>use <code>api::api-name.middleware-name</code> for API-level middlewares</li> <li>use <code>plugin::plugin-name.middleware-name</code> for plugin middlewares</li> </ul>  <p>Tip</p> <p>To list all the registered middlewares, run <code>yarn strapi middlewares:list</code>.</p>","title":"Usage"},{"location":"user-docs/intro/","text":"<p>This user guide contains the functional documentation related to all features available in the admin panel of your Strapi application.</p> <p></p> <p>Before going any further into this user guide, we recommend you to acknowledge the main concepts below. They will help you to understand how Strapi works, and ensure a smooth Strapi experience.</p> <ul> <li> <p>Development, Staging or Production Environment  When you start working on your application, it is in a development environment, which is the status for the content structure and application configuration. After deploying your application, it is in production or staging environment. This status change impacts how you can use your Strapi application, as some features are only available in development environment, such as the Content-type Builder. In this user guide the availability or not of a feature, depending on the application status, is always mentioned in the feature's introduction.</p> </li> <li> <p>Versions  Strapi is constantly evolving and growing. This implies that new releases are quite frequent, to improve what is already available but also to add new features to Strapi. For every new Strapi version, we communicate through our main channels and by sending notifications both on your terminal (when launching your Strapi application), and on your application's admin panel. We always recommend to use the latest version. However, we always keep live both the documentation of the current Strapi version, and the documentation of the previous one - the latter being officially and actively maintained for 6 months after the release of the newest Strapi version.</p> </li> <li> <p>License and Pricing Plans  As a Strapi user you have the choice between using the Community Edition, which is entirely free, or one of the 3 paid plans of the Enterprise Edition: Bronze, Silver, and Gold (see Pricing and Plans). In this user guide if a feature is only available for the Enterprise Edition, a badge is displayed beside the section's title to indicate which plans allow access to that feature (e.g.   ).</p> </li> <li> <p>Roles and Permissions  Some features of the admin panel, as well as the content managed with Strapi itself, are ruled by a system of permissions. From your Strapi admin panel, you have the possibility to define, at a detailed level, the roles and permissions of all administrators and end users. In this user guide, all features and possible options are documented. It is however possible, depending on your role and permissions, that you may not be able to access all these features and options. In that case, please refer to the main Super Admin of your Strapi application.</p> </li> </ul> <p>With all this in mind, you should be ready to start your Strapi experience!</p>","title":"Welcome to the Strapi User Guide!"},{"location":"user-docs/intro/#accessing-the-admin-panel","text":"<p>The admin panel is the back office of your Strapi application. From the admin panel, you will be able to manage content-types, and write their actual content. It is also from the admin panel that you will manage users, both administrators and end users of your Strapi application.</p>  <p>Caution</p> <p>In order to access the admin panel, your Strapi application must be launched, and you must be aware of the URL to its admin panel (e.g. <code>api.example.com/admin</code>).</p>  <p></p> <p>To access the admin panel:</p> <ol> <li>Go to the URL of your Strapi application's admin panel.</li> <li>Enter your credentials to log in.</li> <li>Click on the Login button. You should be redirected to the homepage of the admin panel.</li> </ol>","title":"Accessing the admin panel"},{"location":"user-docs/intro/#using-sso-for-authentication","text":"<p>If your Strapi application was configured to allow authentication through SSO (see Configuring Single Sign-On), you can access the admin panel using a specific provider instead of logging in with a regular Strapi administrator account.</p> <p>To do so, in the login page of your Strapi application, click on a chosen provider. If you cannot see your provider, click the  button to access the full list of all available providers. You will be redirected to your provider's own login page where you will be able to authenticate.</p>","title":"Using SSO for authentication"},{"location":"user-docs/intro/#setting-up-your-administrator-profile","text":"<p>If you are a new administrator, we recommend making sure your profile is all set, before diving into your Strapi application. From your administrator profile, you are able to modify your user information, such as name, username, email or password. You can also choose the language of the interface for your Strapi application.</p> <p></p> <p>To modify your user information:</p> <ol> <li>Click on your account name or initials in the bottom left hand corner of the main navigation of your Strapi application.</li> <li>In the drop-down menu, click on Profile.</li> <li> <p>Modify the information of your choice:</p>    Profile &amp; Experience Instructions     First name Write your first name in the textbox.   Last name Write your last name in the textbox.   Email Write your complete email address in the textbox.   Username (optional) Write a username in the textbox.   Interface language Among the drop-down list, choose a language for your Strapi application interface.   Interface mode Among the drop-down list, choose a mode for your Strapi application interface: either \"Light mode\" or \"Dark mode\". Note that by default, the chosen mode for a Strapi application is based on the browser's mode.    </li> <li> <p>Click on the Save button.</p> </li> </ol>","title":"Setting up your administrator profile"},{"location":"user-docs/intro/#changing-your-password","text":"<p>To change the password of your account:</p> <ol> <li>Go to your administrator profile.</li> <li> <p>Fill in the password-related options:</p>    Password modification      Current password Write your current password in the textbox.  \ud83d\udca1 You can click on the eye icon for the password to be shown.   Password Write the new password in the textbox.  \ud83d\udca1 You can click on the eye icon for the password to be shown.   Password confirmation Write the same new password in the textbox.  \ud83d\udca1 You can click on the eye icon for the password to be shown.    </li> <li> <p>Click on the Save button.</p> </li> </ol>  <p>Congratulations on being a new Strapi user! You're now ready to discover all the features and options that Strapi has to offer!</p>  <p>Welcome to the Strapi community!</p> <p>If you have any trouble with your Strapi experience, you can reach us through GitHub or our forum! The Strapi Community and Strapi team are always available to answer your questions or help you with anything!</p>","title":"Changing your password"},{"location":"user-docs/content-types-builder/1-introduction-to-content-types-builder/","text":"<p>The Content-type Builder is a core plugin of Strapi. It is a feature that is always activated by default and cannot be deactivated. The Content-type Builder is however only accessible when the application is in a development environment.</p> <p>Administrators can access the Content-type Builder from  Content-type Builder in the main navigation of the admin panel.</p> <p></p>  <p>From the Content-type Builder, administrators can create and manage content-types: collection types and single types but also components.</p> <ul> <li>Collection types are content-types that can manage several entries.</li> <li>Single types are content-types that can only manage one entry.</li> <li>Components are a data structure that can be used in multiple collection types and single types.</li> </ul> <p>All 3 are displayed as categories in the sub navigation of the Content-type Builder. In each category are listed all content-types and components that have already been created.</p> <p>From each category of the Content-type Builder sub navigation, it is possible to:</p> <ul> <li>click on an existing content-type or component to access it and edit it (see Managing content-types),</li> <li>or create a new content-type or component (see Creating content-types).</li> </ul>  <p>Tip</p> <p>Click the search icon  in the Content-type Builder sub navigation to find a specific collection type, single type, or component.</p>","title":"Introduction to the Content-type Builder"},{"location":"user-docs/content-types-builder/2-creating-new-content-type/","text":"<p>Development-only</p> <p>The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.</p>  <p>The Content-type Builder allows to create new content-types: single and collection types. Although they are not proper content-types as they cannot exist independently, components can also be created through the Content-type Builder, in the same way as collection and single types.</p>","title":"Creating content-types"},{"location":"user-docs/content-types-builder/2-creating-new-content-type/#creating-a-new-content-type","text":"<p> </p> Images can have captions, too.  <p>Content types are created from the Content-type Builder's Collection types and Single types categories, both displayed in the Content-type Builder sub navigation.</p> <p>To create a new content-type:</p> <ol> <li>Choose whether you want to create a collection type or a single type.</li> <li>In the category of the content-type you want to create, click on Create a new collection/single type.</li> <li>In the content-type creation window, write the name of the new content-type in the Display name textbox.</li> <li>Check the API UID to make sure the automatically pre-filled values are correct. Collection type names are indeed automatically pluralized when displayed in the Content Manager. It is recommended to opt for singular names, but the API UID field allows to fix any pluralization mistake.</li> <li> <p>(optional) In the Advanced Settings tab, configure the available settings for the new content-type:</p>    Setting name Instructions     Draft &amp; Publish Click on ON to activate the Draft &amp; Publish feature for your content-type (see Saving &amp; publishing content). Click on OFF to deactivate the feature.   Enable localization for this Content-Type (if the Internationalization plugin is installed) Tick the box to allow the content-type to be managed in various locales.    </li> <li> <p>Click on the Continue button.</p> </li> <li>Add and configure chosen fields for your content-type (see Configuring fields for content-types).</li> <li>Click on the Save button.</li> </ol>  <p>Caution</p> <p>New content-types are only considered created once they have been saved. Saving is only possible if at least one field has been added and properly configured. If these steps have not been done, a content-type cannot be created, listed in its category in the Content-type Builder, and cannot be used in the Content Manager.</p>","title":"Creating a new content-type"},{"location":"user-docs/content-types-builder/2-creating-new-content-type/#creating-a-new-component","text":"<p></p> <p>Components are created from the same-named category of the Content-type Builder's sub navigation.</p> <p>To create a new component:</p> <ol> <li>In the Components category of the Content-type Builder sub navigation, click on Create a new component.</li> <li>In the component creation window, configure the base settings of the new component:</li> <li>Write the name of the component in the Name textbox.</li> <li>Select an available category, or enter in the textbox a new category name to create one.</li> <li>Choose an icon to represent the new component.</li> <li>Click on the Continue button.</li> <li>Add and configure chosen fields for your component (see Configuring fields for content-types).</li> <li>Click on the Save button.</li> </ol>","title":"Creating a new component"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/","text":"<p>Development-only</p> <p>The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.</p>  <p>Content-types are composed of one or several fields. Each field is designed to contain specific kind of data, filled up in the Content Manager (see Writing content).</p> <p>In the Content-type Builder, fields can be added at the creation of a new content-type or component, or afterward when a content-type or component is edited or updated. The following documentation lists all existing regular fields but also tackles the specificities of components and dynamic zones. For each, you will find a definition, explanation of the form they take once in the Content Manager, and instructions to configure them.</p>  <p>Note</p> <p>Depending on what content-type or component is being created or edited, not all fields -including components and dynamic zones- are always available.</p>  <p></p>","title":"Configuring fields for content-types"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#regular-fields","text":"","title":"Regular fields"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#text","text":"<p>The Text field displays a textbox that can contain small text. This field can be used for titles, descriptions, etc.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Text field.   Type Choose between Short text and Long text, to allow more or less space to fill up the Text field.         Setting name Instructions     Default value Write the default value of the Text field.   RegExp pattern Write a regular expression to make sure the value of the Text field matches a specific format.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Maximum length Tick to define a maximum number of characters allowed.   Minimum length Tick to define a minimum number of characters allowed.","title":"Text"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#rich-text","text":"<p>The Rich Text field displays an editor with formatting options to manage rich text. This field can be used for long written content.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Rich Text field.         Setting name Instructions     Default value Write the default value of the Rich Text field.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Maximum length Tick to define a maximum number of characters allowed.   Minimum length Tick to define a minimum number of characters allowed.","title":"Rich Text"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#number","text":"<p>The Number field displays a field for any kind of number: integer, decimal and float.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Number field.   Number format Choose between integer, big integer, decimal and float.         Setting name Instructions     Default value Write the default value of the Number field.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Maximum value Tick to define a maximum value allowed.   Minimum value Tick to define a minimum value allowed.","title":"Number"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#date","text":"<p>The Date field can display a date (year, month, day), time (hour, minute, second) or datetime (year, month, day, hour, minute, and second) picker.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Date field.   Type Choose between date, datetime and time         Setting name Instructions     Default value Write the default value of the Date field.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Time interval The interval (in minutes) the timepicker will allow to select (for fields of type datetime and time).","title":"Date"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#boolean","text":"<p>The Boolean field displays a toggle button to manage boolean values (e.g. Yes or No, 1 or 0, True or False).</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Boolean field.         Setting name Instructions     Default value Choose the default value of the Boolean field: true, null or false.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.","title":"Boolean"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#relation","text":"<p>The Relation field allows to establish a relation with another content-type, that must be a collection type.</p> <p>There are 6 different types of relations:</p> <ul> <li> One way: Content-type A has one Content-type B</li> <li> One-to-one: Content-type A has and belong to one Content-type B</li> <li> One-to-many: Content-type A belongs to many Content-type B</li> <li> Many-to-one: Content-type B has many Content-type A</li> <li> Many-to-many: Content-type A has and belongs to many Content-type B</li> <li> Many way: Content-type A has many Content-type B</li> </ul> Base settingsAdvanced settings   <p>Configuring the base settings of the Relation field consists in choosing with which existing content-type the relation should be established and the kind of relation. The edition window of the Relation field displays 2 grey boxes, each representing one of the content-types in relation. Between the grey boxes are displayed all possible relation types.</p> <ol> <li>Click on the 2nd grey box to define the content-type B. It must be an already created collection type.</li> <li>Click on the icon representing the relation to establish between the content-types.</li> <li>Choose the Field name of the content-type A, meaning the name that will be used for the field in the content-type A.</li> <li>(optional if disabled by the relation type) Choose the Field name of the content-type B.</li> </ol>      Setting name Instructions     Private field Tick to make the field private and prevent it from being found via the API.","title":"Relation"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#email","text":"<p>The Email field displays an email address field with format validation to ensure the email address is valid.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Email field.         Setting name Instructions     Default value Write the default value of the Email field.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Maximum length Tick to define a maximum number of characters allowed.   Minimum length Tick to define a minimum number of characters allowed.","title":"Email"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#password","text":"<p>The Password field displays a password field that is encrypted.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Password field.         Setting name Instructions     Default value Write the default value of the Password field.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Maximum length Tick to define a maximum number of characters allowed.   Minimum length Tick to define a minimum number of characters allowed.","title":"Password"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#enumeration","text":"<p>The Enumeration field allows to configure a list of values displayed in a drop-down list.</p>  Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Enumeration field.   Values Write the values of the enumeration, one per line.         Setting name Instructions     Default value Choose the default value of the Enumeration field.   Name override for GraphQL Write a custom GraphQL schema type to override the default one for the field.   Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.        <p>Caution</p> <p>Since Strapi v4.1.3, enumeration values should always have an alphabetical character preceding any number as it could otherwise cause the server to crash without notice when the GraphQL plugin is installed.</p>","title":"Enumeration"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#media","text":"<p>The Media field allows to choose one or more media files (e.g. image, video) from those uploaded in the Media Library of the application.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the Media field.   Type Choose between Multiple media to allow multiple media uploads, and Single media to only allow one media upload.         Setting name Instructions     Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.   Select allowed types of media Click on the drop-down list to untick media types not allowed for this field.","title":"Media"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#json","text":"<p>The JSON field allows to configure data in a JSON format, to store JSON objects or arrays.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the JSON field.         Setting name Instructions     Private field Tick to make the field private and prevent it from being found via the API.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the field to have a different value per locale.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Unique field Tick to prevent another field to be identical to this one.","title":"JSON"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#uid","text":"<p>The UID field displays a field that sets a unique identifier, optionally based on an existing other field from the same content-type.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the UID field. It must not contain special characters or spaces.   Attached field Choose what existing field to attach to the UID field. Choose None to not attach any specific field.         Setting name Instructions     Default value Write the default value of the UID field.   Private field Tick to make the field private and prevent it from being found via the API.   Required field Tick to prevent creating or saving an entry if the field is not filled in.   Maximum length Tick to define a maximum number of characters allowed.   Minimum length Tick to define a minimum number of characters allowed.","title":"UID"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#components","text":"<p>Components are a combination of several fields. Components allow to create reusable sets of fields, that can be quickly added to content-types, dynamic zones but also nested into other components.</p> <p>When configuring a component through the Content-type Builder, it is possible to either:</p> <ul> <li>create a new component by clicking on Create a new component (see Creating a new component),</li> <li>or use an existing one by clicking on Use an existing component.</li> </ul> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the component for the content-type.   Select a component When using an existing component only - Select from the drop-down list an existing component.   Type Choose between Repeatable component to be able to use several times the component for the content-type, or Single component to limit to only one time the use of the component.         Setting name Instructions     Required field Tick to prevent creating or saving an entry if the field is not filled in.   Private field Tick to make the field private and prevent it from being found via the API.   Maximum value For repeatable components only - Tick to define a maximum number of characters allowed.   Minimum value For repeatable components only - Tick to define a minimum number of characters allowed.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the component to be translated per available locale.","title":"Components"},{"location":"user-docs/content-types-builder/configuring-fields-content-type/#dynamic-zones","text":"<p>Dynamic zones are a combination of components that can be added to content-types. They allow a flexible content structure as once in the Content Manager, administrators have the choice of composing and rearranging the components of the dynamic zone how they want.</p> Base settingsAdvanced settings      Setting name Instructions     Name Write the name of the dynamic zone for the content-type.         Setting name Instructions     Required field Tick to prevent creating or saving an entry if the field is not filled in.   Maximum value Tick to define a maximum number of characters allowed.   Minimum value Tick to define a minimum number of characters allowed.   Enable localization for this field (if the Internationalization plugin is installed and localization is enabled for the content-type) Allow the dynamic zone to be translated per available locale.       <p>After configuring the settings of the dynamic zone, its components must be configured as well. It is possible to either choose an existing component or create a new one.</p>  <p>Caution</p> <p>When using dynamic zones, different components cannot have the same field name with different types (or with enumeration fields, different values).</p>","title":"Dynamic zones"},{"location":"user-docs/content-types-builder/managing-content-types/","text":"<p>Development-only</p> <p>The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.</p>  <p>The Content-type Builder allows to manage any existing content-type or component, even if it is already being used in the Content Manager. They can only be managed one at a time.</p> <p>To manage a content-type or a component, click on its name in the Collection types, Single types or Components category.</p>","title":"Managing content-types"},{"location":"user-docs/content-types-builder/managing-content-types/#editing-content-types","text":"<p>Managing a content-type or component can include editing the general settings and the fields, but also deleting the whole content-type or component. For any chosen content-type of component, the right side of the Content-type Builder interface displays all available editing options.</p> <p></p> <ul> <li>Next to the name and optional description of the content-type or component, an  Edit button (1) allows to access the general settings of the content-type or component.</li> <li>In the top right corner:</li> <li>the Add new field and Save buttons (2) allow to respectively add another field to the content-type or component (see Configuring fields for content-types), or save any ongoing modification.</li> <li>the Configure the view button allows to access the view configuration interface (see Configuring the edit view)</li> <li>Below the previous editing options, a table (3) lists all the fields created and configured for the content-type or component. From the fields table, it is possible to:</li> <li>Click on the edit button  to edit a field</li> <li>Click on the delete button  to delete a field</li> </ul>  <p>Caution</p> <p>Editing a field allows renaming it. However, keep in mind that regarding the database, renaming a field means creating a whole new field and deleting the former one. Although nothing is deleted from the database, the data that was associated with the former field name will not be accessible from the admin panel of your application anymore.</p>","title":"Editing content-types"},{"location":"user-docs/content-types-builder/managing-content-types/#deleting-content-types","text":"<p>Content types and components can be deleted through the Content-type Builder. Deleting a content-type automatically deletes all entries from the Content Manager that were based on that content-type. The same goes for the deletion of a component, which is automatically deleted from every content-type or entry where it was used.</p> <p>To delete a content-type or component:</p> <ol> <li>In the Content-type Builder sub navigation, click on the name of the content-type or component to delete.</li> <li>In the edition interface of the chosen content-type or component, click on the  Edit button on the right side of the content-type's or component's name.</li> <li>In the edition window, click on the Delete button.</li> <li>In the confirmation window, confirm the deletion.</li> </ol>  <p>Caution</p> <p>Deleting a content-type only deletes what was created and available from the Content-type Builder, and by extent from the admin panel of your Strapi application. All the data that was created based on that content-type is however kept in the database. For more information, please refer to the related GitHub issue.</p>","title":"Deleting content-types"}]}